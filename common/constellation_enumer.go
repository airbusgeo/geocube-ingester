// Code generated by "enumer -json -type Constellation"; DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ConstellationName = "UnknownSentinel1Sentinel2PHRSPOT"

var _ConstellationIndex = [...]uint8{0, 7, 16, 25, 28, 32}

const _ConstellationLowerName = "unknownsentinel1sentinel2phrspot"

func (i Constellation) String() string {
	if i < 0 || i >= Constellation(len(_ConstellationIndex)-1) {
		return fmt.Sprintf("Constellation(%d)", i)
	}
	return _ConstellationName[_ConstellationIndex[i]:_ConstellationIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ConstellationNoOp() {
	var x [1]struct{}
	_ = x[Unknown-(0)]
	_ = x[Sentinel1-(1)]
	_ = x[Sentinel2-(2)]
	_ = x[PHR-(3)]
	_ = x[SPOT-(4)]
}

var _ConstellationValues = []Constellation{Unknown, Sentinel1, Sentinel2, PHR, SPOT}

var _ConstellationNameToValueMap = map[string]Constellation{
	_ConstellationName[0:7]:        Unknown,
	_ConstellationLowerName[0:7]:   Unknown,
	_ConstellationName[7:16]:       Sentinel1,
	_ConstellationLowerName[7:16]:  Sentinel1,
	_ConstellationName[16:25]:      Sentinel2,
	_ConstellationLowerName[16:25]: Sentinel2,
	_ConstellationName[25:28]:      PHR,
	_ConstellationLowerName[25:28]: PHR,
	_ConstellationName[28:32]:      SPOT,
	_ConstellationLowerName[28:32]: SPOT,
}

var _ConstellationNames = []string{
	_ConstellationName[0:7],
	_ConstellationName[7:16],
	_ConstellationName[16:25],
	_ConstellationName[25:28],
	_ConstellationName[28:32],
}

// ConstellationString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ConstellationString(s string) (Constellation, error) {
	if val, ok := _ConstellationNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ConstellationNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Constellation values", s)
}

// ConstellationValues returns all values of the enum
func ConstellationValues() []Constellation {
	return _ConstellationValues
}

// ConstellationStrings returns a slice of all String values of the enum
func ConstellationStrings() []string {
	strs := make([]string, len(_ConstellationNames))
	copy(strs, _ConstellationNames)
	return strs
}

// IsAConstellation returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Constellation) IsAConstellation() bool {
	for _, v := range _ConstellationValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Constellation
func (i Constellation) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Constellation
func (i *Constellation) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Constellation should be a string, got %s", data)
	}

	var err error
	*i, err = ConstellationString(s)
	return err
}
