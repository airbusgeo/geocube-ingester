// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package geocube

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeocubeDownloaderClient is the client API for GeocubeDownloader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeocubeDownloaderClient interface {
	// Request cube using metadatas returned by a call to Geocube.GetCube()
	DownloadCube(ctx context.Context, in *GetCubeMetadataRequest, opts ...grpc.CallOption) (GeocubeDownloader_DownloadCubeClient, error)
	// Version of the GeocubeDownloader
	Version(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
}

type geocubeDownloaderClient struct {
	cc grpc.ClientConnInterface
}

func NewGeocubeDownloaderClient(cc grpc.ClientConnInterface) GeocubeDownloaderClient {
	return &geocubeDownloaderClient{cc}
}

func (c *geocubeDownloaderClient) DownloadCube(ctx context.Context, in *GetCubeMetadataRequest, opts ...grpc.CallOption) (GeocubeDownloader_DownloadCubeClient, error) {
	stream, err := c.cc.NewStream(ctx, &GeocubeDownloader_ServiceDesc.Streams[0], "/geocube.GeocubeDownloader/DownloadCube", opts...)
	if err != nil {
		return nil, err
	}
	x := &geocubeDownloaderDownloadCubeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GeocubeDownloader_DownloadCubeClient interface {
	Recv() (*GetCubeMetadataResponse, error)
	grpc.ClientStream
}

type geocubeDownloaderDownloadCubeClient struct {
	grpc.ClientStream
}

func (x *geocubeDownloaderDownloadCubeClient) Recv() (*GetCubeMetadataResponse, error) {
	m := new(GetCubeMetadataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geocubeDownloaderClient) Version(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/geocube.GeocubeDownloader/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeocubeDownloaderServer is the server API for GeocubeDownloader service.
// All implementations must embed UnimplementedGeocubeDownloaderServer
// for forward compatibility
type GeocubeDownloaderServer interface {
	// Request cube using metadatas returned by a call to Geocube.GetCube()
	DownloadCube(*GetCubeMetadataRequest, GeocubeDownloader_DownloadCubeServer) error
	// Version of the GeocubeDownloader
	Version(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	mustEmbedUnimplementedGeocubeDownloaderServer()
}

// UnimplementedGeocubeDownloaderServer must be embedded to have forward compatible implementations.
type UnimplementedGeocubeDownloaderServer struct {
}

func (UnimplementedGeocubeDownloaderServer) DownloadCube(*GetCubeMetadataRequest, GeocubeDownloader_DownloadCubeServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadCube not implemented")
}
func (UnimplementedGeocubeDownloaderServer) Version(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedGeocubeDownloaderServer) mustEmbedUnimplementedGeocubeDownloaderServer() {}

// UnsafeGeocubeDownloaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeocubeDownloaderServer will
// result in compilation errors.
type UnsafeGeocubeDownloaderServer interface {
	mustEmbedUnimplementedGeocubeDownloaderServer()
}

func RegisterGeocubeDownloaderServer(s grpc.ServiceRegistrar, srv GeocubeDownloaderServer) {
	s.RegisterService(&GeocubeDownloader_ServiceDesc, srv)
}

func _GeocubeDownloader_DownloadCube_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCubeMetadataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeocubeDownloaderServer).DownloadCube(m, &geocubeDownloaderDownloadCubeServer{stream})
}

type GeocubeDownloader_DownloadCubeServer interface {
	Send(*GetCubeMetadataResponse) error
	grpc.ServerStream
}

type geocubeDownloaderDownloadCubeServer struct {
	grpc.ServerStream
}

func (x *geocubeDownloaderDownloadCubeServer) Send(m *GetCubeMetadataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GeocubeDownloader_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeocubeDownloaderServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geocube.GeocubeDownloader/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeocubeDownloaderServer).Version(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeocubeDownloader_ServiceDesc is the grpc.ServiceDesc for GeocubeDownloader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeocubeDownloader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geocube.GeocubeDownloader",
	HandlerType: (*GeocubeDownloaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _GeocubeDownloader_Version_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadCube",
			Handler:       _GeocubeDownloader_DownloadCube_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/geocubeDownloader.proto",
}
